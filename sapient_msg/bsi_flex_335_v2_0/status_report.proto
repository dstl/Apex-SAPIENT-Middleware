// Dstl (c) Crown Copyright 2024
//
// [START declaration]
syntax = "proto3";
package sapient_msg.bsi_flex_335_v2_0;

import "sapient_msg/bsi_flex_335_v2_0/location.proto";
import "sapient_msg/bsi_flex_335_v2_0/range_bearing.proto";
import "sapient_msg/proto_options.proto";
// [END declaration]

// [START java_declaration]
option java_multiple_files = true;
option java_package = "uk.gov.dstl.sapientmsg.bsiflex335v2";
option java_outer_classname = "StatusReportProto";
// [END java_declaration]


// [START messages]
message StatusReport {
    reserved 9; // The coverage field has been made repeated so that a (child) Fusion Node can report its total coverage to its (parent) Fusion Node
    optional string report_id = 1 [(field_options) = {is_mandatory: true, is_ulid: true}]; // ULID for the message
    optional System system = 2 [(field_options) = {is_mandatory: true}]; // Current ASM status
    optional Info info = 3 [(field_options) = {is_mandatory: true}]; // State of the information in this message
    optional string active_task_id = 4 [(field_options) = {is_ulid: true}]; // ULID of the task the ASM is currently performing
    optional string mode = 5 [(field_options) = {is_mandatory: true}]; // The current mode of the ASM
    optional Power power = 6; // The power supply of the ASM
    optional Location node_location = 7; // Current ASM location
    optional LocationOrRangeBearing field_of_view = 8; // Area currently visible to ASM
//    optional LocationOrRangeBearing coverage = 9; // Area that the ASM can cover
    repeated LocationOrRangeBearing obscuration = 10; // Area that the ASM cannot cover
    repeated Status status = 11; // Information about the ASM or the envionrment
    repeated LocationOrRangeBearing coverage = 12; // The coverage field has been made repeated so that a Fusion Node can report the total coverage from its child/edge nodes

    enum System {
        reserved 4; // This value was used up to v7 SAPIENT, but was withdrawn after as it was not considered well-defined
        SYSTEM_UNSPECIFIED = 0; // The system state is unset
        SYSTEM_OK = 1; // The system is operating normally
        SYSTEM_WARNING = 2; // There is a potential issue with the system
        SYSTEM_ERROR = 3; // There is an issue with the system
//        SYSTEM_TAMPER = 4; // The system has been tampered with - DEPRECIATED
        SYSTEM_GOODBYE = 5; // The system is about to disconnect
    }

    message Power {
        reserved 1, 2; // These string field have been replaced by enumerations
//        optional string source = 1; // Power source (e.g. battery/mains)
//        optional string status = 2; // Power supply status
        optional int32 level = 3; // Battery level 0-100
        PowerSource source = 4; // The power source being used by the node
        PowerStatus status = 5; // The status of the power source being used by the node
    }

    enum PowerSource {
        POWERSOURCE_UNSPECIFIED = 0; // The PowerSource is unset
        POWERSOURCE_OTHER = 1; // The power source is of a different type listed in this enumeration
        POWERSOURCE_MAINS = 2; // The power source is the mains (fixed infrastructure)
        POWERSOURCE_INTERNAL_BATTERY = 3; // The power source is a battery contained within the node
        POWERSOURCE_EXTERNAL_BATTERY = 4; // The power source is a battery external to the node
        POWERSOURCE_GENERATOR = 5; // The power source is a generator
        POWERSOURCE_SOLAR_PV = 6; // The power source is a solar photovoltaic panel/array
        POWERSOURCE_WIND_TURBINE = 7; // The power source is a wind turbine
        POWERSOURCE_FUEL_CELL = 8; // The power source is a fuel cell
    }

    enum PowerStatus {
        POWERSTATUS_UNSPECIFIED = 0; // The PowerStatus is unset
        POWERSTATUS_OK = 1; // The power status is normal
        POWERSTATUS_FAULT = 2; // There is a fault with the power source
    }

    enum Info {
        INFO_UNSPECIFIED = 0; // Unset enum
        INFO_NEW = 1; // New information about the system is being presented
        INFO_UNCHANGED = 2; // The existing information about the system is up-to-date
    }

    message Status {
        reserved 2; // status_type change to an enumeration
        optional StatusLevel status_level = 1; // Information level being reported
//        optional string status_type = 2 [(field_options) = {is_mandatory: true}]; // Type of the information being reported (e.g. Weather)
        optional string status_value = 3; // Value of the information being reported (e.g. Raining)
        optional StatusType status_type = 4 [(field_options) = {is_mandatory: true}]; // Type of the information being reported (e.g. Weather)
    }

    enum StatusType {
        STATUS_TYPE_UNSPECIFIED = 0; // No status type has been set
        STATUS_TYPE_INTERNAL_FAULT = 1; // The node has an internal fault
        STATUS_TYPE_EXTERNAL_FAULT = 2; // External influences have caused a fault with the node
        STATUS_TYPE_ILLUMINATION = 3; //
        STATUS_TYPE_WEATHER = 4; //
        STATUS_TYPE_CLUTTER = 5; //
        STATUS_TYPE_EXPOSURE = 6; //
        STATUS_TYPE_MOTION_SENSITIVITY = 7; //
        STATUS_TYPE_PTZ_STATUS = 8; //
        STATUS_TYPE_PD = 9; //
        STATUS_TYPE_FAR = 10; //
	STATUS_TYPE_NOT_DETECTING = 11; // The node is not detecting
	STATUS_TYPE_PLATFORM = 12; // A report about a platform node
	STATUS_TYPE_OTHER = 13; //
    }
    enum StatusLevel {
        reserved 1;
		STATUS_LEVEL_UNSPECIFIED = 0; // No status level has been set
        // STATUS_LEVEL_SENSOR_STATUS = 1; // Information about the current node state
        STATUS_LEVEL_INFORMATION_STATUS = 2; // Information about the environment that might affect this or other nodes
        STATUS_LEVEL_WARNING_STATUS = 3; // Information about performance degregation of the node
        STATUS_LEVEL_ERROR_STATUS = 4; // Information about severely affecting this node's capabilities
    }
}
// [END messages]
